name: Deploy sin EC2

on:
  push:
    tags:
      - '*'

env:
  AWS_REGION: eu-west-1

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Configurar credenciales AWS
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Checkout este repositorio
        uses: actions/checkout@v3

      - name: Leer configuraci√≥n desde config/config.properties
        id: config
        run: |
          FILE=config/config.properties

          if [ ! -f "$FILE" ]; then
            echo "‚ùå Archivo ${FILE} no encontrado"
            exit 1
          fi

          REPO_URL=$(grep '^REPO_URL=' "$FILE" | cut -d '=' -f2-)
          INSTALL=$(grep '^install=' "$FILE" | cut -d '=' -f2- | tr -d '[:space:]')

          if [ -z "$REPO_URL" ]; then
            echo "‚ùå Variable REPO_URL no encontrada o vac√≠a"
            exit 1
          fi

          echo "‚úÖ URL encontrada: ${REPO_URL}"
          echo "repo_url=${REPO_URL}" >> "$GITHUB_OUTPUT"
          echo "install=${INSTALL}" >> "$GITHUB_OUTPUT"

      - name: Clonar repo privado
        run: |
          REPO_URL="${{ steps.config.outputs.repo_url }}"
          REPO_NAME=$(basename -s .git "${REPO_URL}")

          echo "Clonando repo ${REPO_NAME}..."
          git clone "https://x-access-token:${{ secrets.REPO_ACCESS_TOKEN }}@${REPO_URL#https://}"

      - name: Instalar Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      - name: Ver versi√≥n de Terraform
        run: terraform version

      - name: Ejecutar Terraform
        run: |
          REPO_URL="${{ steps.config.outputs.repo_url }}"
          REPO_NAME=$(basename -s .git "${REPO_URL}")
          INSTALL="${{ steps.config.outputs.install }}"

          echo "üìÇ Entrando al repo clonado: ${REPO_NAME}"
          cd "${REPO_NAME}"
          ls -lrt

          if [ -z "$INSTALL" ]; then
            echo "‚ÑπÔ∏è Variable 'install' vac√≠a o no definida. No se ejecutar√° Terraform."
            exit 0
          fi

          # Lock local (opcional si usas backend local)
          if [ -f ".terraform.tfstate.lock.info" ]; then
            echo "‚è≥ Esperando a que se libere el lock de Terraform..."
            while [ -f ".terraform.tfstate.lock.info" ]; do
              sleep 5
            done
          fi

          echo "üîç Ejecutando Terraform init..."
          terraform init -input=false

          if [ "$INSTALL" = "true" ]; then
            echo "üöÄ Ejecutando terraform apply"
            terraform apply -auto-approve
          elif [ "$INSTALL" = "false" ]; then
            echo "üí£ Ejecutando terraform destroy"
            terraform destroy -auto-approve
          else
            echo "‚ö†Ô∏è Valor de 'install' no reconocido: '$INSTALL'. No se ejecutar√° ninguna acci√≥n."
          fi

      - name: Hacer commit y push forzado de todo lo que haya
        run: |
          REPO_URL="${{ steps.config.outputs.repo_url }}"
          REPO_NAME=$(basename -s .git "${REPO_URL}")
          cd "${REPO_NAME}"
  
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
  
          git add -A
  
          if git diff-index --quiet HEAD; then
            echo "‚úÖ No hay cambios para commitear."
          else
            echo "‚úÖ Hay cambios. Haciendo commit..."
            git commit -m "üöÄ Commit autom√°tico desde GitHub Actions por tag $GITHUB_REF_NAME"
  
            # üîê Setear la URL con token antes del push
            git remote set-url origin "https://x-access-token:${{ secrets.REPO_ACCESS_TOKEN }}@${REPO_URL#https://}"
  
            echo "üîÅ Haciendo push forzado..."
            git push origin HEAD --force
          fi

# MIT License
# Copyright (c) 2025 Jose Magari√±o
# See LICENSE file for more details.
