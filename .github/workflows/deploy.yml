name: Deploy sin EC2

on:
  push:
    tags:
      - '*'

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout este repositorio
        uses: actions/checkout@v3

      - name: Leer URL del repositorio desde config/config.properties
        id: config
        run: |
          FILE=config/config.properties

          if [ ! -f "$FILE" ]; then
            echo "‚ùå Archivo ${FILE} no encontrado"
            exit 1
          fi

          REPO_URL=$(grep '^REPO_URL=' "${FILE}" | cut -d '=' -f2-)

          if [ -z "$REPO_URL" ]; then
            echo "‚ùå Variable {REPO_URL} no encontrada o vac√≠a"
            exit 1
          fi

          echo "‚úÖ URL encontrada: ${REPO_URL}"
          echo "repo_url=${REPO_URL}" >> ${GITHUB_OUTPUT}

      - name: Clonar repo privado
        run: |
          REPO_URL="${{ steps.config.outputs.repo_url }}"
          REPO_NAME=$(basename -s .git "${REPO_URL}")

          echo "Clonando repo ${REPO_NAME}..."
          git clone "https://x-access-token:${{ secrets.REPO_ACCESS_TOKEN }}@${REPO_URL#https://}"

      - name: Instalar Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      - name: Ver versi√≥n de Terraform
        run: terraform version

      - name: Ejecutar terraform
        run: |
          REPO_URL="${{ steps.config.outputs.repo_url }}"
          REPO_NAME=$(basename -s .git "${REPO_URL}")

          echo "Entrando al repo clonado: ${REPO_NAME}"
          cd "${REPO_NAME}"
          ls -lrt

          CONFIG_FILE="config/config.properties"

          if [ ! -f "$CONFIG_FILE" ]; then
            echo "‚ùå Archivo ${CONFIG_FILE} no encontrado"
            exit 1
          fi

          INSTALL=$(grep '^install=' "$CONFIG_FILE" | cut -d '=' -f2- | tr -d '[:space:]')

          echo "üîß Valor de install: '${INSTALL}'"

          if [ -z "$INSTALL" ]; then
            echo "‚ÑπÔ∏è No se defini√≥ 'install'. No se ejecutar√° ninguna acci√≥n de Terraform."
            exit 0
          fi

          # Esperar si hay un lock file de Terraform (solo si usas local backend)
          if [ -f ".terraform.tfstate.lock.info" ]; then
            echo "‚è≥ Esperando a que termine otro proceso de Terraform..."
            while [ -f ".terraform.tfstate.lock.info" ]; do
              sleep 5
            done
          fi

          echo "üîç Ejecutando Terraform init..."
          terraform init -input=false

          if [ "$INSTALL" = "true" ]; then
            echo "üöÄ Ejecutando terraform apply"
            terraform apply -auto-approve
          elif [ "$INSTALL" = "false" ]; then
            echo "üí£ Ejecutando terraform destroy"
            terraform destroy -auto-approve
          else
            echo "‚ö†Ô∏è Valor de 'install' no reconocido: '$INSTALL'"
          fi     

      - name: Hacer commit y push forzado de todo lo que haya
        run: |
          REPO_URL="${{ steps.config.outputs.repo_url }}"
          REPO_NAME=$(basename -s .git "${REPO_URL}")
          cd "${REPO_NAME}"

          git config user.name "github-actions"
          git config user.email "github-actions@github.com"

          git add -A

          if git diff-index --quiet HEAD; then
            echo "‚úÖ No hay cambios para commitear."
          else
            echo "‚úÖ Hay cambios. Haciendo commit..."
            git commit -m "üöÄ Commit autom√°tico desde GitHub Actions"
            echo "üîÅ Haciendo push forzado..."
            git push origin HEAD --force
          fi
